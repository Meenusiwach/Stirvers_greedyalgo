import java.util.Arrays;

class Pair {
    int weight;
    int value;

    Pair(int weight, int value) {
        this.weight = weight;
        this.value = value;
    }
}

public class Solution {
    public static double maximumValue(Pair[] items, int n, int W) {
        // Sort items based on value per weight in descending order
        Arrays.sort(items, (a, b) -> Double.compare((double)b.value / b.weight, (double)a.value / a.weight));

        double totalValue = 0.0;
        int remainingWeight = W;

        for (int i = 0; i < n; i++) {
            if (items[i].weight <= remainingWeight) {
                // If the entire item can be added to the knapsack
                totalValue += items[i].value;
                remainingWeight -= items[i].weight;
            } else {
                // If only a fraction of the item can be added
                double fraction = (double) remainingWeight / items[i].weight;
                totalValue += fraction * items[i].value;
                break;
            }
        }

        return totalValue;
    }

    public static void main(String[] args) {
        // Example usage:
        Pair[] items1 = {new Pair(50, 40), new Pair(40, 50), new Pair(90, 25),
                         new Pair(120, 100), new Pair(10, 30), new Pair(200, 45)};
        int n1 = 6;
        int W1 = 200;
        System.out.println(maximumValue(items1, n1, W1)); // Output: 204.0

        Pair[] items2 = {new Pair(20, 12), new Pair(24, 35), new Pair(36, 41),
                         new Pair(40, 25), new Pair(42, 32)};
        int n2 = 5;
        int W2 = 100;
        System.out.println(maximumValue(items2, n2, W2)); // Output: 106.48
    }
}
